generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ola {
  id Int @id
}

model client {
  id                 Int                  @default(autoincrement())
  corporate_reason   String               @db.VarChar(1000)
  fantasy_name       String?              @db.VarChar(1000)
  branch_activity    String?              @db.VarChar(1000)
  cnpj               String               @db.VarChar(14)
  state_registration String?              @db.VarChar(100)
  type_contribuition String?
  situation          Boolean              @default(true)
  image_company      image_company[]
  company_address    company_address[]
  delivery_address   delivery_address[]
  financinal_contact financial_contact[]
  owner_partner      owner_partner[]
  commercial_contact commercial_contact[]
  accounting_contact accounting_contact[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([id])
}

model sector {
  id         Int     @default(autoincrement())
  name       String? @db.VarChar(1000)
  email      String? @db.VarChar(100)
  phone      String? @db.VarChar(100)
  cell_phone String? @db.VarChar(100)
  rg         String?
  cpf        String? @db.VarChar(11)

  financial_contact        financial_contact[]
  owner_partner            owner_partner[]
  commercial_contact       commercial_contact[]
  accounting_contact       accounting_contact[]
  financial_image          financial_image[]
  commercial_image         commercial_image[]
  owner_partner_image      owner_partner_image[]
  accounting_contact_image accounting_contact_image[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([id])
}

model imagem {
  id                       Int                        @id @default(autoincrement())
  path                     String?
  image_company            image_company[]
  financial_image          financial_image[]
  commercial_imagem        commercial_image[]
  owner_partner            owner_partner_image[]
  accounting_contact_image accounting_contact_image[]
  supplier_pf              supplier_pf_Image[]        @relation("campo")
  supplier_pj              supplier_pj[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model address {
  id           Int     @id @default(autoincrement())
  cep          String? @db.VarChar(8)
  street       String? @db.VarChar(100)
  number       String? @db.VarChar(100)
  complement   String? @db.VarChar(100)
  city         String? @db.VarChar(100)
  neighborhood String? @db.VarChar(100)
  state        String?

  company_address     company_address[]
  delivery_address    delivery_address[]
  address_supplier_pf supplier_pf_address[]

  Supplier_pj_address supplier_pj_address[]
  created_at          DateTime              @default(now())
  update_at           DateTime              @default(now())
}

model supplier_pj_address {
  id_supplier Int
  id_address  Int

  supplier supplier_pj @relation(fields: [id_supplier], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address  address     @relation(fields: [id_address], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_address, id_supplier])
}

model supplier_pf {
  id                  Int                   @id @default(autoincrement())
  supplier_name       String                @db.VarChar(255)
  supplier_code       String                @db.VarChar(255)
  email               String                @db.VarChar(150)
  phone               String                @db.VarChar(20)
  rg                  String                @db.VarChar(15)
  cpf                 String                @unique @db.VarChar(11)
  birth_date          DateTime?
  status              Boolean               @default(false)
  address_supplier_pf supplier_pf_address[]
  supplier_imagem     supplier_pf_Image[]   @relation("supplier_id_image")
  created_at          DateTime              @default(now())
  update_at           DateTime              @default(now())
}

model supplier_pf_Image {
  // id                Int         @id @default(autoincrement())
  id_supplier_pf   Int
  id_image         Int
  supplier_pf      supplier_pf @relation(fields: [id_supplier_pf], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "supplier_id_image")
  supplier_pf_imag imagem      @relation(fields: [id_image], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "campo")
  created_at       DateTime    @default(now())
  update_at        DateTime    @default(now())

  @@id([id_image, id_supplier_pf])
}

model supplier_pf_address {
  id_supplier_pf Int
  id_address     Int

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  supplier_pf supplier_pf @relation(fields: [id_supplier_pf], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address     address     @relation(fields: [id_address], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_address, id_supplier_pf])
}

model supplier_pj {
  id                     Int                   @id @default(autoincrement())
  id_imagem              Int
  imagem                 imagem                @relation(fields: [id_imagem], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplier_pj_address    supplier_pj_address[]
  corporate_reason       String
  email                  String?
  phone                  String?
  fantasy_name           String?
  cnpj                   String                @unique @db.VarChar(14)
  answerable             String?
  state_registration     String?
  type_contribuition     String?
  municipal_registration String?
  suframa_registration   String?
  status                 Boolean               @default(true)
  created_at             DateTime              @default(now())
  update_at              DateTime              @default(now())
}

model company_address {
  id         Int      @id @default(autoincrement())
  adressId   Int
  clientId   Int
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adress     address  @relation(fields: [adressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model commercial_image {
  imageId              Int
  commercial_contactId Int
  commercial           sector   @relation(fields: [commercial_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at           DateTime @default(now())
  update_at            DateTime @default(now())

  @@id([imageId, commercial_contactId])
}

model image_company {
  companyId  Int
  imageId    Int
  image      imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company    client   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([companyId, imageId])
}

model delivery_address {
  id         Int      @id @default(autoincrement())
  adressId   Int
  clientId   Int
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adress     address  @relation(fields: [adressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model financial_image {
  imageId             Int
  financial_contactId Int
  image               imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  financial_contact   sector   @relation(fields: [financial_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at          DateTime @default(now())
  update_at           DateTime @default(now())

  @@id([imageId, financial_contactId])
}

model financial_contact {
  sectorId   Int
  clientId   Int
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model owner_partner_image {
  imageId         Int
  owner_partnerId Int
  image           imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_partner   sector   @relation(fields: [owner_partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime @default(now())
  update_at       DateTime @default(now())

  @@id([imageId, owner_partnerId])
}

model owner_partner {
  sectorId   Int
  clientId   Int
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())

  update_at DateTime @default(now())

  @@id([sectorId, clientId])
}

model commercial_contact {
  sectorId Int
  clientId Int

  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model accounting_contact_image {
  imageId              Int
  accounting_contactId Int
  accounting_contact   sector   @relation(fields: [accounting_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at           DateTime @default(now())
  update_at            DateTime @default(now())

  @@id([imageId, accounting_contactId])
}

model accounting_contact {
  sectorId   Int
  clientId   Int
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model adm {
  id         Int       @id @default(autoincrement())
  cnpj       String    @unique @db.Char(14)
  password   String
  role_adm   roleadm[]
  created_at DateTime  @default(now())
  update_at  DateTime  @default(now())
}

model role {
  id         Int       @id @default(autoincrement())
  role_name  String
  role_adm   roleadm[]
  created_at DateTime  @default(now())
  update_at  DateTime  @default(now())
}

model roleadm {
  adm_id     Int
  role_id    Int
  adm        adm      @relation(fields: [adm_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role       role     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([adm_id, role_id])
}
