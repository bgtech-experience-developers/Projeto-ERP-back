
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id Int @id @default(autoincrement())
  corporate_reason String @db.VarChar(100)
  fantasy_name String @db.VarChar(100) 
  branch_activity String @db.VarChar(100)
  cnpj String @db.VarChar(14) 
  state_registration String @db.VarChar(9)
  photo String?
  type_contribuition String
  company_address company_address[]
  delivery_address delivery_address[]
  financinal_contact financial_contact[]
  owner_partner owner_partner[]
   commercial_contact commercial_contact[]
   accounting_contact accounting_contact[]
  created_at DateTime @default(now())
  update_at DateTime @default(now())


}
model sector {
   id Int @id @default(autoincrement())
   name String @db.VarChar(100)
   email String @db.VarChar(100) 
   phone String @db.VarChar(100)
   cell_phone String? @db.VarChar(100)
   rg String @db.VarChar(9)
   photo String?
   financial_contact financial_contact[]
   owner_partner owner_partner[]
   commercial_contact commercial_contact[]
   accounting_contact accounting_contact[]
    created_at DateTime @default(now())
  update_at DateTime @default(now())
   
   
}

model Address {
  id Int @id @default(autoincrement())
  cep String @db.VarChar(8)
  street String @db.VarChar(100)
  number String @db.VarChar(100)
  complement String @db.VarChar(100)
  city String @db.VarChar(100)
  neighborhood String @db.VarChar(100)
  company_address company_address[]
  delivery_address delivery_address[]
  created_at DateTime @default(now())
  update_at DateTime @default(now())
}
model company_address {
  id Int @id @default(autoincrement())
  adressId Int
  clientId Int
  client Client @relation(fields: [clientId],references: [id])
  adress Address @relation(fields: [adressId],references: [id])
  created_at DateTime @default(now())
  update_at DateTime @default(now())
}

model delivery_address {
    id Int @id @default(autoincrement())
    adressId Int
    clientId Int
    client Client @relation(fields: [clientId],references: [id])
    adress Address @relation(fields: [adressId],references: [id])
    created_at DateTime @default(now())
    update_at DateTime @default(now())
   
}

model financial_contact {
  id Int @id @default(autoincrement())
    sectorId Int
    clientId Int
    client Client @relation(fields: [clientId],references: [id])
    sector sector @relation(fields: [sectorId],references: [id])
    created_at DateTime @default(now())
    update_at DateTime @default(now())
   

}
model owner_partner{
   id Int @id @default(autoincrement())
   sectorId Int
  clientId Int
  client Client @relation(fields: [clientId],references: [id])
  sector sector @relation(fields: [sectorId],references: [id])
      created_at DateTime @default(now())
    update_at DateTime @default(now())
}
model commercial_contact{
     id Int @id @default(autoincrement())

     sectorId Int
  clientId Int
  client Client @relation(fields: [clientId],references: [id])
  sector sector @relation(fields: [sectorId],references: [id])
      created_at DateTime @default(now())
    update_at DateTime @default(now())

}
model  accounting_contact{
   id Int @id @default(autoincrement())

     sectorId Int
  clientId Int
  client Client @relation(fields: [clientId],references: [id])
  sector sector @relation(fields: [sectorId],references: [id])
      created_at DateTime @default(now())
    update_at DateTime @default(now())
}
model Adm {
  id Int @id @default(autoincrement())
  cnpj String @db.Char(14)
  password String 
  role_adm RoleAdm[]
  
} 

model Role {
  id Int @id @default(autoincrement())
  role_name String
  role_adm RoleAdm[]

}

model RoleAdm{
  adm_id Int
  role_id Int
  adm Adm @relation(fields: [adm_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])

  @@id([adm_id, role_id])

}