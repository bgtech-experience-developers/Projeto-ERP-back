// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 Int                  @default(autoincrement())
  corporate_reason   String               @db.VarChar(100)
  fantasy_name       String               @db.VarChar(100)
  branch_activity    String               @db.VarChar(100)
  cnpj               String               @db.VarChar(14)
  state_registration String               @db.VarChar(9)
  type_contribuition String
  situation          Boolean              @default(true)
  image_company      image_company[]
  company_address    company_address[]
  delivery_address   delivery_address[]
  financinal_contact financial_contact[]
  owner_partner      owner_partner[]
  commercial_contact commercial_contact[]
  accounting_contact accounting_contact[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([id])
}

model sector {
  id         Int     @default(autoincrement())
  name       String  @db.VarChar(100)
  email      String  @db.VarChar(100)
  phone      String? @db.VarChar(100)
  cell_phone String  @db.VarChar(100)
  rg         String  @db.VarChar(9)
  cpf        String  @db.VarChar(11)

  financial_contact        financial_contact[]
  owner_partner            owner_partner[]
  commercial_contact       commercial_contact[]
  accounting_contact       accounting_contact[]
  financial_image          financial_image[]
  commercial_image         commercial_image[]
  owner_partner_image      owner_partner_image[]
  accounting_contact_image accounting_contact_image[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([id])
}

model imagem {
  id                       Int                        @id @default(autoincrement())
  path                     String?
  image_company            image_company[]
  financial_image          financial_image[]
  commercial_imagem        commercial_image[]
  owner_partner            owner_partner_image[]
  accounting_contact_image accounting_contact_image[]
  supplier_pf              Supplier_pf_Image[]
  created_at               DateTime                   @default(now())
  update_at                DateTime                   @default(now())
}

model Address {
  id           Int    @id @default(autoincrement())
  cep          String @db.VarChar(8)
  street       String @db.VarChar(100)
  number       String @db.VarChar(100)
  complement   String @db.VarChar(100)
  city         String @db.VarChar(100)
  neighborhood String @db.VarChar(100)

  company_address     company_address[]
  delivery_address    delivery_address[]
  address_supplier_pf Supplier_pf_Address[]

  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model Supplier_pf {
  id                  Int                   @id @default(autoincrement())
  supplier_name       String                @db.VarChar(255)
  supplier_code       String                @db.VarChar(255)
  email               String                @unique @db.VarChar(150)
  phone               String                @db.VarChar(20)
  rg                  String                @db.VarChar(15)
  cpf                 String                @db.VarChar(11)
  birth_date          DateTime
  product_supplier_pf Product_Supplier_pf[]
  address_supplier_pf Supplier_pf_Address[]
  supller_imagem      Supplier_pf_Image[]
  created_at          DateTime              @default(now())
  update_at           DateTime              @default(now())
}

model Supplier_pf_Image {
  id                Int         @id @default(autoincrement())
  id_supplier_pf    Int
  id_image          Int
  supplier_pf       Supplier_pf @relation(fields: [id_supplier_pf], references: [id])
  supplier_pf_image imagem      @relation(fields: [id_image], references: [id])
  created_at        DateTime    @default(now())
  update_at         DateTime    @default(now())
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  internal_code       String                @db.VarChar(20)
  stock               Int
  product_supplier_pf Product_Supplier_pf[]
  created_at          DateTime              @default(now())
  update_at           DateTime              @default(now())
}

model Product_Supplier_pf {
  price          String @db.VarChar(40)
  purchase_tax   String @db.VarChar(40) // Definir qual o propósito desse campo, se é calcular o price final.
  delivery_time  String @db.VarChar(50)
  id_product     Int
  id_supplier_pf Int

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  supplier_pf Supplier_pf @relation(fields: [id_supplier_pf], references: [id])
  product     Product     @relation(fields: [id_product], references: [id])

  @@id([id_product, id_supplier_pf])
}

model Supplier_pf_Address {
  id             Int @id @default(autoincrement())
  id_supplier_pf Int
  id_address     Int

  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  supplier_pf Supplier_pf @relation(fields: [id_supplier_pf], references: [id])
  address     Address     @relation(fields: [id_address], references: [id])
}

// Contruir a tabela de Produtos Generica

model company_address {
  id         Int      @id @default(autoincrement())
  adressId   Int
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adress     Address  @relation(fields: [adressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model commercial_image {
  imageId              Int
  commercial_contactId Int
  commercial           sector   @relation(fields: [commercial_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at           DateTime @default(now())
  update_at            DateTime @default(now())

  @@id([imageId, commercial_contactId])
}

model image_company {
  companyId  Int
  imageId    Int
  image      imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company    Client   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([companyId, imageId])
}

model delivery_address {
  id         Int      @id @default(autoincrement())
  adressId   Int
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adress     Address  @relation(fields: [adressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())
}

model financial_image {
  imageId             Int
  financial_contactId Int
  image               imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  financial_contact   sector   @relation(fields: [financial_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at          DateTime @default(now())
  update_at           DateTime @default(now())

  @@id([imageId, financial_contactId])
}

model financial_contact {
  sectorId   Int
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model owner_partner_image {
  imageId         Int
  owner_partnerId Int
  image           imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_partner   sector   @relation(fields: [owner_partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime @default(now())
  update_at       DateTime @default(now())

  @@id([imageId, owner_partnerId])
}

model owner_partner {
  sectorId   Int
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model commercial_contact {
  sectorId Int
  clientId Int

  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model accounting_contact_image {
  imageId              Int
  accounting_contactId Int
  accounting_contact   sector   @relation(fields: [accounting_contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                imagem   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at           DateTime @default(now())
  update_at            DateTime @default(now())

  @@id([imageId, accounting_contactId])
}

model accounting_contact {
  sectorId   Int
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector     sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([sectorId, clientId])
}

model Adm {
  id         Int       @id @default(autoincrement())
  cnpj       String    @unique @db.Char(14)
  password   String
  role_adm   RoleAdm[]
  created_at DateTime  @default(now())
  update_at  DateTime  @default(now())
}

model Role {
  id         Int       @id @default(autoincrement())
  role_name  String
  role_adm   RoleAdm[]
  created_at DateTime  @default(now())
  update_at  DateTime  @default(now())
}

model RoleAdm {
  adm_id     Int
  role_id    Int
  adm        Adm      @relation(fields: [adm_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@id([adm_id, role_id])
}
